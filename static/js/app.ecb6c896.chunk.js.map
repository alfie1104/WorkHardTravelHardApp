{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","a","async","AsyncStorage","getItem","s","JSON","parse","console","log","saveToDos","value","setItem","stringify","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.ecb6c896.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  gray: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  /*\n  1) 재시작시 travel, work 상태 기억\n  2) Done기능 추가\n  */\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n\n  const onChangeText = (payload) => setText(payload);\n\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      if (s) {\n        setToDos(JSON.parse(s));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const saveToDos = async (value) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(value));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n\n    // const newToDos = Object.assign({}, toDos, {\n    //   [Date.now()]: { text, work: working },\n    // });\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To do?\");\n\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  const editToDo = (key) => {\n    const newToDos = { ...toDos };\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.gray,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.gray,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={18} color={theme.gray} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}